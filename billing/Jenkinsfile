pipeline {
    agent any
    
    tools {
        maven 'maven'
    }
    
    environment {
        DOCKER_IMAGE = "aleja254/devops_udemy_billing"
        PROJECT_VERSION = "1.0.0"
        PROJECT_DIR = "billing"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/master']],
                    userRemoteConfigs: [[
                        credentialsId: 'github_creds',
                        url: 'https://github.com/AlejandraCalderon/devops_udemy.git'
                    ]]
                ])
            }
        }

        stage('Build JAR') {
            steps {
                dir(env.PROJECT_DIR) {
                    bat 'mvn --version'
                    bat 'mvn clean package -DskipTests'
                    
                    // Guardar el jar como artifacts
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }

        stage('Export Artifact') {
            steps {
                echo '✔️ Artifacts listos para ser copiados en otros pipelines'
                // Aquí no necesitas hacer más, archiveArtifacts ya guarda el jar
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir(env.PROJECT_DIR) {
                        bat 'dir target\\'
                        dockerImage = docker.build("${env.DOCKER_IMAGE}:${env.PROJECT_VERSION}", "--build-arg JAR_FILE=target/*.jar .")
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'dockerhub_creds',
                    usernameVariable: 'DOCKER_HUB_USER',
                    passwordVariable: 'DOCKER_HUB_PASS'
                )]) {
                    script {
                        bat "docker login -u ${env.DOCKER_HUB_USER} -p ${env.DOCKER_HUB_PASS}"
                        docker.withRegistry('https://index.docker.io/v1/', 'dockerhub_creds') {
                            dockerImage.push("${env.PROJECT_VERSION}")
                            dockerImage.push("latest")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo '✔️ Pipeline finalizado'
            cleanWs()
        }
        success {
            echo '✅ ¡Pipeline ejecutado con éxito!'
        }
        failure {
            echo '❌ Falló la construcción o publicación'
        }
    }
}
