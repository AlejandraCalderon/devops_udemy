pipeline {
    agent any
    
    tools {
        // Usa el nombre exacto que configuraste en Jenkins (Global Tool Configuration)
        maven 'maven'  // Este debe coincidir con el nombre que pusiste en la configuración
    }
    
    environment {
        // Configuración de Docker
        DOCKER_IMAGE = "aleja254/devops_udemy_billing"
        DOCKER_REGISTRY = "docker.io"
        
        // Configuración del proyecto (ajusta según tu proyecto)
        PROJECT_VERSION = "1.0.0"
    }

    stages {
        // Stage 1: Checkout del código desde Git
        stage('Checkout SCM') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/master']],
                    userRemoteConfigs: [[
                        credentialsId: 'github_creds',  // Usa el ID de tus credenciales configuradas
                        url: 'https://github.com/AlejandraCalderon/devops_udemy.git'
                    ]],
                    extensions: [],
                    doGenerateSubmoduleConfigurations: false
                ])
            }
        }

        // Stage 2: Build del JAR con Maven
        stage('Build JAR') {
            steps {
                bat 'mvn --version'  // Para verificar que Maven está disponible
                bat 'mvn clean package -DskipTests'
                
                // Opcional: Archivar el JAR para usarlo después
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

        // Stage 3: Build de la imagen Docker
        stage('Build Docker Image') {
            steps {
                script {
                    // Verifica que Docker está instalado
                    bat 'docker --version'
                    
                    // Construye la imagen Docker
                    dockerImage = docker.build("${DOCKER_IMAGE}:${PROJECT_VERSION}")
                }
            }
        }

        // Stage 4: Push a Docker Hub
        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'dockerhub-creds',  // ID de tus credenciales de Docker Hub
                    usernameVariable: 'DOCKER_HUB_USER',
                    passwordVariable: 'DOCKER_HUB_PASS'
                )]) {
                    script {
                        // Login a Docker Hub
                        bat "docker login -u ${env.DOCKER_HUB_USER} -p ${env.DOCKER_HUB_PASS}"
                        
                        // Push de la imagen
                        dockerImage.push("${PROJECT_VERSION}")
                        dockerImage.push("latest")
                        
                        // Opcional: Limpiar imágenes locales
                        bat 'docker image prune -f'
                    }
                }
            }
        }
    }

    post {
        always {
            echo '✔️ Pipeline finalizado'
            // Opcional: Limpiar workspace
            cleanWs()
        }
        success {
            echo '✅ ¡Pipeline ejecutado con éxito!'
            // Puedes agregar notificaciones aquí (email, Slack, etc.)
        }
        failure {
            echo '❌ Falló la construcción o publicación'
            // Puedes agregar notificaciones de error aquí
        }
    }
}